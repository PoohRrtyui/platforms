package com.xunyun.infanteduplatform.controller.pages;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.xunyun.infanteduplatform.domain.ClassManageEntity;
import com.xunyun.infanteduplatform.domain.SysCodeMaster;
import com.xunyun.infanteduplatform.domain.SysDepartmentInfo;
import com.xunyun.infanteduplatform.domain.SysUserInDepartment;
import com.xunyun.infanteduplatform.domain.SysUserInfo;
import com.xunyun.infanteduplatform.domain.SysUserInorg;
import com.xunyun.infanteduplatform.domain.TeacherInClassEntity;
import com.xunyun.infanteduplatform.domain.TreeEntity;
import com.xunyun.infanteduplatform.domain.SysUserLogin;
import com.xunyun.infanteduplatform.domain.UserInClassEntity;
import com.xunyun.infanteduplatform.service.CodeMasterService;
import com.xunyun.infanteduplatform.service.DepartmentRelationService;
import com.xunyun.infanteduplatform.service.UserService;
import com.xunyun.infanteduplatform.utils.MD5Util;


/**
 * 类说明:用户管理处理方法类<br/>
 * 创建人:羊鑫<br/>
 * 创建日期:2015年11月30日<br/>
 * 
 */
@Controller
@RequestMapping("user")
public class UserManageController {

  @Autowired
  private DepartmentRelationService departmentRelationService;
  @Autowired
  private UserService userService;
  @Autowired
  private CodeMasterService codeMasterService;
  /**
   * 访问用户列表页面 方法描述:<br>
   * 创建日期:2015年11月30日<br>
   */
  @RequestMapping("/index")
  public ModelAndView user_index(String appCode, Integer schoolId,String type) {
    ModelAndView mav = new ModelAndView("pages/userManage/index");
    mav.addObject("schoolId", schoolId);
    mav.addObject("type", type);
    return mav;
  }

  /**
   * 用户机构树加载 方法描述:<br>
   * 创建日期:2015年11月30日<br>
   * 
   */
  // 查询一级栏目
  @ResponseBody
  @RequestMapping(value = "/select", method = RequestMethod.POST)
  public List<TreeEntity> queryChannel(Integer schoolId,@RequestParam(defaultValue="0")Integer id) {
    //获取该学校ID下部门
    Map<String, Integer> dataMap = new HashMap<>();
    dataMap.put("pId", id);
    dataMap.put("sId",schoolId);
    List<SysDepartmentInfo> departmentInfos = departmentRelationService.getClassAndDepList(dataMap);
    List<TreeEntity> treeEntities = new ArrayList<TreeEntity>();
    for (SysDepartmentInfo departmentInfo : departmentInfos) {
      TreeEntity entity;
      entity = new TreeEntity();
      entity.setId(departmentInfo.getDepartmentId());
      entity.setName(departmentInfo.getDepartmentName());
      entity.setpId(departmentInfo.getParentDepartmentId());
      entity.setIsParent(departmentInfo.getIsChild() == 1);
      entity.setIsClass(false);
      treeEntities.add(entity);
    }
    //获取该学校ID下的班级
    if(id==0){
    List<ClassManageEntity> classInfos = departmentRelationService.getClassList(schoolId);
    for (ClassManageEntity classInfo : classInfos) {
      TreeEntity entity;
      entity = new TreeEntity();
      entity.setId(classInfo.getClassId());
      entity.setName(classInfo.getClassName());
      //设置为0是为了防止，查询班级时传的schoolId恰好是部门Id,就会出现班级成为部门的子节点
      entity.setpId(0);
      entity.setIsParent(false);
      entity.setIsClass(true);
      treeEntities.add(entity);
    }
    }
    return treeEntities;
  }
  
  /**
   * 用户列表页面 方法描述:<br>
   * 创建日期:2015年12月2日<br>
   */
 @ResponseBody
 @RequestMapping(value = "/list")
  public Map<Object,Object> user_list(@RequestParam(value = "keyValue", required = false) String keyValue,
      @RequestParam(value = "draw", required = false) Integer draw,
      @RequestParam(value = "start", required = false) Integer start,
      @RequestParam(value = "length", required = false) Integer length,
      Integer schoolId,Integer treeId,Boolean isClass) {
   // 开始条数
   int startNumber = start + 1;
   // 结束条数
   int endNumber = start + length;
   // 总数目
   int countNumber = 0;

   // 声明对象
//   SysUserInorg item = new SysUserInorg();
//   // 查询条件
//   item.setKeyValue(keyValue);
//   // 开始条数
//   item.setStartNumber(startNumber);
//   // 结束条数
//   item.setEndNumber(endNumber);
   
   Map<Object, Object> userList = new HashMap<Object, Object>();
   Map<Object, Object> dataMap = new HashMap<>();
   dataMap.put("startNumber", startNumber);
   dataMap.put("keyValue", keyValue);
   dataMap.put("endNumber", endNumber);
   dataMap.put("schoolId", schoolId);
   dataMap.put("treeId",treeId);
   dataMap.put("isClass",isClass);
   List<SysUserInorg> users = userService.queryUserBySId(dataMap);
   userList.put("data", users);
   /*if(treeId==null){    
     users = userService.queryUserBySId(schoolId);
//     userList.put("data", users);
   }else{
     if(isClass=true){
       List<SysUserInfo> techs = userService.queryUserByCId(treeId);
       List<SysUserInfo> stus = userService.queryStuByCId(treeId);
       techs.addAll(stus);
       users = techs;
       userList.put("data", users);
     }else{
       users = userService.queryUserByDId(treeId);
       userList.put("data", users);
     }
   }*/
   // 数据不为空，取总数
   if (users != null && users.size() > 0) {
       countNumber = users.get(0).getCountNumber();
   }
   // 总条数
   userList.put("recordsTotal", countNumber);
   // 过滤条数
   userList.put("recordsFiltered", countNumber);
   // 当前页数
   userList.put("draw", draw);
   return userList;
  }
 
 /**
  * 进入用户编辑页面 方法描述:<br>
  * 创建日期:2015年12月3日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/editUser",method = RequestMethod.POST)
 public ModelAndView user_add(Integer userId,Integer schoolId,Integer treeId,Boolean isClass,String type,Integer userType) {
   ModelAndView mav = new ModelAndView("pages/userManage/edit");
//   List<SysCodeMaster> opitons = codeMasterService.findOrg("机构身份");
//   mav.addObject("opitons", opitons);
   SysUserInfo users = new SysUserInfo();
   String pwd = null;
//   userId = users.getUserid();
   if(userId!=null&&userId!=' '){
     users= userService.findUserById(userId);
     SysUserLogin  logins= userService.findPwdById(userId);
     pwd = logins.getPassword();
   }
   mav.addObject("schoolId", schoolId);
   mav.addObject("treeId", treeId);
   mav.addObject("isClass", isClass);
   mav.addObject("type", type); 
   mav.addObject("userType", userType); 
   mav.addObject("users", users);
   mav.addObject("passWord", pwd);
   mav.addObject("userId", userId);
   return mav;
 }
 
 /**
  * 用户逻辑删除 方法描述:<br>
  * 创建日期:2015年12月3日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/delUser",method = RequestMethod.POST)
 public Integer user_del(Integer userId,Integer schoolId,Integer treeId,Boolean isClass,Integer userType) {
   Integer status;
   status = userService.delUserById(userId,schoolId,treeId,isClass,userType);
   return status;
 }
 
 /**
  * 用户保存 方法描述:<br>
  * 创建日期:2015年12月7日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/saveUserInfo",method = RequestMethod.POST)
 public Integer save_user(SysUserInfo userinfo,Integer schoolId,Integer treeId,Boolean isClass,Integer userType,String type,String pwd,Integer userId) {
   Integer status;
   String lei = "chenlei";
   String password = MD5Util.MD5(pwd);
   
   SysUserLogin loginUser = new SysUserLogin();
   
   SysUserInorg userInorg = new SysUserInorg();
   
   TeacherInClassEntity teach = new TeacherInClassEntity();
   
   UserInClassEntity stu = new UserInClassEntity();
   
   SysUserInDepartment dept = new SysUserInDepartment();
   
   loginUser.setEmail(userinfo.getEmail());
   loginUser.setMobile(userinfo.getMobile());
   userType=0;
   if(userId!=null){
     userinfo.setUserid(userId);
     loginUser.setId(userId);
     status=userService.updateUserInfo(userinfo,loginUser);
   }else{
     userinfo.setCreationtime(Calendar.getInstance().getTime());
     userinfo.setIdtype(1);
     userinfo.setCreatedby(lei);
     userinfo.setDeleteflg(0);
     
     loginUser.setName(userinfo.getUsername());
     loginUser.setPassword(password);
     
     userInorg.setCreatedby(lei);
     userInorg.setStartTime(Calendar.getInstance().getTime());
     userInorg.setOrganizationType(type);
     userInorg.setOrganizationId(schoolId);
     userInorg.setIsAdmin(0);
     userInorg.setUserType(0);
     
     teach.setOrganizationId(schoolId);
     teach.setType(0);
     
     stu.setOrganizationId(schoolId);
     
     dept.setOrganizationId(schoolId);
     status = userService.saveUserInfo(userinfo,loginUser,userInorg,teach,stu,dept,treeId,isClass,userType);
   }
   return status;
 }
}

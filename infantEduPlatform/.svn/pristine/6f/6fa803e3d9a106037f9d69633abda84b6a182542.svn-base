package com.xunyun.infanteduplatform.controller.interaction.bulletin;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xunyun.infanteduplatform.domain.interaction.Bulletin;
import com.xunyun.infanteduplatform.domain.interaction.BulletinListModel;
import com.xunyun.infanteduplatform.domain.interaction.BulletinModel;
import com.xunyun.infanteduplatform.domain.interaction.Image;
import com.xunyun.infanteduplatform.domain.interaction.ImageModel;
import com.xunyun.infanteduplatform.domain.interaction.ImageRelation;
import com.xunyun.infanteduplatform.service.AppInfoService;
import com.xunyun.infanteduplatform.service.BulletinService;
import com.xunyun.infanteduplatform.service.ImageService;
import com.xunyun.infanteduplatform.utils.DateUtils;
import com.xunyun.infanteduplatform.utils.InteractionUtils;
import com.xunyun.infanteduplatform.utils.ReadInputStreamUtils;

@Controller("bulletinInfo")
@RequestMapping("bulletinInfo")
public class BulletinController {
  @Autowired
  private BulletinService bulletinService;

  @Autowired
  private ImageService imageService;

  @Autowired
  private AppInfoService appInfoService;

  /**
   * @author lpp 方法描述：公告列表获取
   */
  @RequestMapping(value = "/queryBulletinList")
  @ResponseBody
  public Map<String, Object> queryBulletinList(String appCode, Integer organizationId,
       @RequestParam(defaultValue = "1") Integer pageIndex, @RequestParam(
          defaultValue = "10") Integer pageSize) {
    Map<String, Object> map = new HashMap<String, Object>();

    if (appCode == null || "".equals(appCode)) {
      map.put("state", "error");
      map.put("message", "应用状态为空，获取信息失败");
      map.put("data", "");

    } else if (organizationId == null) {
      map.put("state", "error");
      map.put("message", "机构代码为空，查询失败！");
      map.put("data", "");

    } else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用状态为非开启状态，无权获取用户信息！");
      map.put("data", "");

    } else {
      // 开始条数
      int startNumber = pageSize * (pageIndex - 1) + 1;
      // 结束条数
      int endNumber = pageSize * pageIndex;
      // 总条数
      int dataCount = 0;
      // 声明对象
      Bulletin item = new Bulletin();
      // 开始条数
      item.setStartNumber(startNumber);
      // 结束条数
      item.setEndNumber(endNumber);
      // 机构代码
      item.setOrganizationId(organizationId);
      // 类型
      item.setBulletinType(1);
      // 获取数据
      List<Bulletin> listData = bulletinService.queryBulletinList(item);

      List<BulletinListModel> list = new ArrayList<BulletinListModel>();
      // 数据不为空，取总数
      if (listData != null && listData.size() > 0) {
        dataCount = listData.get(0).getDataCount();
      }
      // 查询数据
      for (Bulletin bul : listData) {
        // 声明对象
        BulletinListModel bulletinListModel = new BulletinListModel();
        // 公告Id
        bulletinListModel.setBulletinId(bul.getBulletinId());
        // 公告标题
        bulletinListModel.setTitle(bul.getTitle());
        // 公告内容
        bulletinListModel.setBulletinContent(bul.getBulletinContent());
        // 获取创建时间
        String creationTime = DateUtils.getTimeString(bul.getCreationTime());
        bulletinListModel.setCreationTime(creationTime);
        // 获取创建人
        bulletinListModel.setCreatedBy(bul.getCreatedBy());

        list.add(bulletinListModel);
      }

      // 计算总页数
      int pageCount = (int) Math.ceil((double) dataCount / pageSize);
      // 状态
      map.put("state", "success");
      // 提示信息
      map.put("message", "");
      // 数据列表
      map.put("data", list);
      // 当前页数
      map.put("pageIndex", pageIndex);
      // 每页显示数
      map.put("pageSize", pageSize);
      // 总页数
      map.put("pageCount", pageCount);
      // 总条数
      map.put("dataCount", dataCount);

    }
    return map;
  }

  /**
   * @author lpp 方法描述：公告信息查询
   * @throws Exception
   */
  @RequestMapping(value = "/queryBulletinInfo")
  @ResponseBody
  public Map<String, Object> queryBulletinInfo(String appCode, Integer bulletinId) throws Exception {
    Map<String, Object> map = new HashMap<String, Object>();
    // 判断应用状态
    if (appCode == null || "".equals(appCode)) {
      map.put("state", "error");
      map.put("message", "应用状态为空，获取信息失败");
      map.put("data", "");

    } else if (bulletinId == null) {
      map.put("state", "error");
      map.put("message", "公告Id为空，查询失败！！");
      map.put("data", "");

    } else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用状态为非开启状态，无权获取用户信息！");
      map.put("data", "");

    } else {
      // 获取公告信息
      Bulletin item = bulletinService.queryByBulletinId(bulletinId);
      // 声明对象
      BulletinModel bulletinModel = new BulletinModel();
      // 公告Id
      bulletinModel.setBulletinId(item.getBulletinId());
      // 获取公告内容
      bulletinModel.setBulletinContent(item.getBulletinContent());
      // 获取创建人
      bulletinModel.setCreatedBy(item.getCreatedBy());
      // 获取标题
      bulletinModel.setTitle(item.getTitle());
      // 获取创建时间
      String creationTime = DateUtils.getTimeString(item.getCreationTime());
      bulletinModel.setCreationTime(creationTime);
      // 查询图片列表
      List<Image> listPicture = imageService.queryImageList(bulletinId);
      List<ImageModel> list = new ArrayList<ImageModel>();
      // 查询图片内容
      for (Image image : listPicture) {

        if (image.getStrImageContent() != null) {
          // 创建ImageModel类实例
          ImageModel imageModel = new ImageModel();
          // 创建InputStream类实例
          InputStream inStream = new ByteArrayInputStream(image.getStrImageContent().getBytes());
          // 读取输入流
          byte data[] = ReadInputStreamUtils.readInputStream(inStream);
          inStream.read(data);
          // 关闭输入流
          inStream.close();
          // 获取图片内容
          imageModel.setImageContent(data);
          list.add(imageModel);

        }

      }
      bulletinModel.setImageModelList(list);

      // 状态
      map.put("state", "success");
      // 提示信息
      map.put("message", "");
      // 返回数据
      map.put("data", bulletinModel);
    }
    return map;
  }

  /**
   * @author lpp 方法描述：公告信息保存
   * @throws Exception
   */
  @RequestMapping(value = "/addBulletinInfo")
  @ResponseBody
  public Map<String, Object> saveBulletinInfo(String appCode, Integer organizationId, String title,
      String bulletinContent, Integer userId, @RequestParam(value = "imageContent",
          required = false) List<Blob> imageContent) throws Exception {
    Map<String, Object> map = new HashMap<>();
    if (appCode == null && "".equals(appCode)) {
      map.put("state", "error");
      map.put("message", "应用状态为空，获取信息失败");
      map.put("data", "");

    } else if (organizationId == null) {
      map.put("state", "error");
      map.put("message", "机构代码为空，传入参数有误！");
      map.put("data", "");

    } else if (title == null && "".equals(title)) {
      map.put("state", "error");
      map.put("message", "标题不能为空！");
      map.put("data", "");

    } else if (bulletinContent == null && "".equals(bulletinContent)) {
      map.put("state", "error");
      map.put("message", "公告内容不能为空！");
      map.put("data", "");

    } else if (userId == null) {
      map.put("state", "error");
      map.put("message", "用户Id为空，传入参数有误！");
      map.put("data", "");

    } else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用状态为非开启状态，无权获取用户信息！");
      map.put("data", "");

    } else {
      // 声明对象
      Bulletin bulletin = new Bulletin();
      // 获取机构代码
      bulletin.setOrganizationId(organizationId);
      // 获取公告类型
      bulletin.setBulletinType(1);
      // 获取公告级别
      bulletin.setBulletinLevel(1);
      // 获取班级Id
      bulletin.setClassId(0);
      // 获取来源
      bulletin.setSources(0);
      // 获取标题
      bulletin.setTitle(title);
      // 获取公告内容
      bulletin.setBulletinContent(bulletinContent);
      // 获取创建时间
      bulletin.setCreationTime(new Date());
      // 获取修改时间
      bulletin.setLastUpdateTime(new Date());
      // 获取创建人
      bulletin.setCreatedBy((userId).toString());
      // 获取修改人
      bulletin.setLastUpdatedBy((userId).toString());
      /* 插入公告信息数据 */
      bulletinService.addBulletinInfo(bulletin);
      // 返回添加公告的公告Id
      Integer moduleId = bulletin.getBulletinId();

      for (Blob item : imageContent) {
        // 声明对象
        Image image = new Image();
        // TODO :文件流获取
        File file = InteractionUtils.blob2File(item);
        // 图片名称
        String fileName = file.getName();
        // 名称（没有扩展名）
        String name = fileName.substring(0, fileName.lastIndexOf('.'));
        // 扩展名
        String extension = fileName.substring(fileName.lastIndexOf('.') + 1);
        // 获取图片内容
        image.setImageContent(item);
        // 机构Id
        image.setOrganizationId(organizationId);
        // 文件名称
        image.setImageName(name);
        // 大小
        image.setImageSize(file.length());
        // 扩展名
        image.setExtension(extension);
        // 创建人
        image.setCreatedBy(userId.toString());
        // 创建时间
        image.setCreationTime(new Date());
        // 最终修改人
        image.setLastUpdatedBy(userId.toString());
        // 最终修改时间
        image.setLastUpdateTime(new Date());
        // 添加图片表
        imageService.addImageList(image);

        // 返回添加图片的图片Id
        Integer imageId = image.getImageId();
        // 声明对象
        ImageRelation imageRelation = new ImageRelation();
        // 模块Id
        imageRelation.setModuleId(moduleId);
        // 图片Id
        imageRelation.setImageId(imageId);
        // 机构Id
        imageRelation.setOrganizationId(organizationId);
        // 添加图片关联表
        imageService.addImageRelation(imageRelation);
      }

      // 状态
      map.put("state", "success");
      // 提示信息
      map.put("message", "保存成功!");
      map.put("data", "");
    }
    return map;
  }


}

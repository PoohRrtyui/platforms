package com.xunyun.infanteduplatform.controller.interaction.login;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import com.xunyun.infanteduplatform.domain.LoginUserInfo;
import com.xunyun.infanteduplatform.domain.SysUserInfo;
import com.xunyun.infanteduplatform.domain.SysUserInorg;
import com.xunyun.infanteduplatform.domain.SysUserLogin;
import com.xunyun.infanteduplatform.domain.interaction.UserInfo;
import com.xunyun.infanteduplatform.service.AppInfoService;
import com.xunyun.infanteduplatform.service.LoginService;
import com.xunyun.infanteduplatform.service.LoginUserService;
import com.xunyun.infanteduplatform.service.RegisterService;
import com.xunyun.infanteduplatform.service.UserService;
import com.xunyun.infanteduplatform.utils.FileUploadUtil;
import com.xunyun.infanteduplatform.utils.MD5Util;

@Controller
@RequestMapping("registerApp")
public class RegisterAppController {

  @Resource
  private RegisterService registerService;
  @Resource
  private UserService userService;
  @Resource
  private LoginService loginService;
  @Resource
  private LoginUserService loginUserService;
  @Resource
  private AppInfoService appInfoService;

  // 用户注册
  @RequestMapping("/register")
  @ResponseBody
  public Map<String, Object> register(String name, String password, String mobile) {
    Map<String, Object> map = new HashMap<String, Object>();
    if (name == "" || name == null) {
      map.put("state", "error");
      map.put("message", "用户名不能为空，注册失败");
      map.put("data", "");
    } else if (password == "" || password == null) {
      map.put("state", "error");
      map.put("message", "密码不能为空，注册失败");
      map.put("data", "");
    } else if (mobile == "" || mobile == null) {
      map.put("state", "error");
      map.put("message", "手机号码不能为空，注册失败");
      map.put("data", "");
    } else if (password.length() < 8) {
      map.put("state", "error");
      map.put("message", "密码长度不能少于8位，注册失败");
      map.put("data", "");
    } else {
      Pattern pattern = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$");
      Matcher matcher = pattern.matcher(mobile);
      if (!matcher.find()) {
        map.put("state", "error");
        map.put("message", "手机号码格式错误，注册失败");
        map.put("data", "");
      } else {
        name = name.toLowerCase();
        Map<String, Object> nameMap = new HashMap<String, Object>();
        nameMap.put("name", name);
        int nameCount = registerService.registerValidate(nameMap);
        Map<String, Object> mobileMap = new HashMap<String, Object>();
        mobileMap.put("mobile", mobile);
        int mobileCount = registerService.registerValidate(mobileMap);
        if (nameCount != 0) {
          map.put("state", "error");
          map.put("message", "用户名已存在，注册失败");
          map.put("data", "");
        } else if (mobileCount != 0) {
          map.put("state", "error");
          map.put("message", "此手机号码已注册，注册失败");
          map.put("data", "");
        } else {
          int count = 0;
          password = MD5Util.MD5(password);
          SysUserLogin userRegister = new SysUserLogin();
          userRegister.setName(name);
          userRegister.setPassword(password);
          userRegister.setMobile(mobile);
          count = registerService.register(userRegister);
          SysUserInfo userInfo = new SysUserInfo();
          userInfo.setUserid(userRegister.getId());
          userInfo.setUsername(name);
          userInfo.setMobile(mobile);
          userInfo.setGendercode(0);
          userInfo.setIdtype(01);
          userInfo.setDeleteflg(0);
          userInfo.setCreationtime(Calendar.getInstance().getTime());
          String by = userRegister.getId().toString();
          userInfo.setCreatedby(by);
          userInfo.setLastupdatetime(Calendar.getInstance().getTime());
          userInfo.setLastupdatedby(by);
          SysUserInorg userInorg = new SysUserInorg();
          userInorg.setUserId(userRegister.getId());
          userInorg.setUserType(0);
          userInorg.setIsAuthentication(0);
          userInorg.setIsAdmin(0);
          count = registerService.register(userInfo, userInorg);
          if (count != 0) {
            map.put("state", "success");
            map.put("message", "注册成功");
            map.put("data", "");
          }
        }
      }
    }
    return map;
  }

  // 用户登录
  @RequestMapping("/login")
  @ResponseBody
  public Map<String, Object> login(String appCode, String name, String password) {
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == "" || appCode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (name == "" || name == null) {
      map.put("state", "error");
      map.put("message", "账号不能为空，登陆失败");
      map.put("data", "");
    } else if (password == "" || password == null) {
      map.put("state", "error");
      map.put("message", "密码不能为空，登陆失败");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appCode)) {
        map.put("state", "error");
        map.put("message", "应用状态为非开启状态，无权获取用户信息");
        map.put("data", "");
    } else {
        SysUserLogin loginer = new SysUserLogin();
        loginer.setName(name.toLowerCase());
        loginer.setPassword(MD5Util.MD5(password));
        Integer logged = loginService.entry(loginer);
        if (logged == null) {
          map.put("state", "error");
          map.put("message", "账号或密码错误，登陆失败");
          map.put("data", "");
        } else {
          LoginUserInfo loginUserInfo = new LoginUserInfo();
          loginUserInfo.setUserid(logged);
          loginUserInfo = loginUserService.findLoginUserById(loginUserInfo);
          map.put("state", "success");
          map.put("message", "登陆成功");
          map.put("data", loginUserInfo);
        }
    }
    return map;
  }

  // 用户信息获取
  @RequestMapping("/select")
  @ResponseBody
  public Map<String, Object> select(String appCode, Integer userId) {
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == "" || appCode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (userId == null) {
      map.put("state", "error");
      map.put("message", "用户ID不能为空，获取信息失败");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appCode)) {
        map.put("state", "error");
        map.put("message", "应用状态为非开启状态，无权获取用户信息");
        map.put("data", "");
    } else {
        UserInfo userInfo = userService.searchById(userId);
        if (userInfo == null) {
          map.put("state", "error");
          map.put("message", "此用户不存在");
          map.put("data", "");
        } else {
          map.put("state", "success");
          map.put("message", "获取信息成功");
          map.put("data", userInfo);
        }
    }
    return map;
  }
  
  // 用户头像修改
  @RequestMapping("/updateImage")
  @ResponseBody
  public Map<String, Object> updateImage(HttpServletRequest request,String appCode, Integer userId,
      @RequestParam("imgFile") MultipartFile imgFile) throws Exception{
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == "" || appCode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (userId == null) {
      map.put("state", "error");
      map.put("message", "用户ID不能为空，获取信息失败");
      map.put("data", "");
    } else if (imgFile == null) {
      map.put("state", "error");
      map.put("message", "图片不能为空，获取信息失败");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appCode)) {
        map.put("state", "error");
        map.put("message", "应用状态为非开启状态，无权获取用户信息");
        map.put("data", "");
    }else if(!userService.findById(userId)){
      map.put("state", "error");
      map.put("message", "此用户不存在");
      map.put("data", "");
    } else {
      //绝对路径
      String realPath = request.getSession().getServletContext().getRealPath("/");
      String resourcePath = "resources/uploadImages/interactionImages/";
      //获取用户id，文件夹名称更新到用户头像字段
      String idString = Integer.toString(userId);      
      String imgFolder = idString;
      if(FileUploadUtil.allowUpload(imgFile.getContentType())){
        //文件夹存在时候的路径
        String existPath = realPath + resourcePath + imgFolder + "/";
        //上传路径
        File dir = new File(existPath);
        if(!dir.exists()){
          dir.mkdirs();
        }
      //上传
        String fileName=new SimpleDateFormat("yyyyMMddHHmmssSSS").format(Calendar.getInstance().getTime());
        String imgName=imgFile.getContentType();
        File file = new File(dir,fileName+"."+imgName.substring(imgName.lastIndexOf("/")+1));
        imgFile.transferTo(file);
        Map<String, Object> images = new HashMap<String, Object>();
        images.put("userId", userId);
        images.put("imgFolder", imgFolder);
        Integer count=userService.updateImage(images);
        if(count>0){
          map.put("state", "success");
          map.put("message", "修改成功");
          map.put("data", "");
        }else{
          map.put("state", "error");
          map.put("message", "修改失败");
          map.put("data", "");
        }
      }
    }  
    return map;
  }

  // 用户信息修改
  @RequestMapping("/updateUser")
  @ResponseBody
  public Map<String, Object> updateUser(String appCode, Integer userId, 
      @RequestParam(value = "nickName", required = false) String nickName, 
      @RequestParam(value = "name",required = false) String name,
      @RequestParam(value = "genderCode", required = false) Integer genderCode, 
      @RequestParam(value = "IDNo", required = false) String IDNo,
      @RequestParam(value = "birthday", required = false) Date birthday,
      @RequestParam(value = "mobile", required = false) String mobile, 
      @RequestParam(value = "telephone", required = false) String telephone, 
      @RequestParam(value = "email",required = false) String email,
      @RequestParam(value = "qq", required = false) String qq,
      @RequestParam(value = "description", required = false) String description) {
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == "" || appCode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (userId == null) {
      map.put("state", "error");
      map.put("message", "用户ID不能为空，获取信息失败");
      map.put("data", "");
    }else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用状态为非开启状态，无权获取用户信息");
      map.put("data", "");
    }else if(!userService.findById(userId)){
      map.put("state", "error");
      map.put("message", "此用户不存在");
      map.put("data", "");
    } else if (mobile != null || email != null) {
      map = mobileReg(userId, mobile, email);
      if(nickName != null || name != null || genderCode != null || IDNo != null
        || birthday != null || telephone != null || qq != null || description != null){
        map =chooseUserinfo(userId, nickName, name, genderCode, IDNo, birthday, telephone, qq,description);
      }
    } else if (nickName != null || name != null || genderCode != null || IDNo != null
        || birthday != null || telephone != null || qq != null || description != null) {
      map =chooseUserinfo(userId, nickName, name, genderCode, IDNo, birthday, telephone, qq,description);
    } else {
      map.put("state", "success");
      map.put("message", "修改成功");
      map.put("data", "");
    }
    return map;
  }

  public Map<String, Object> chooseUserinfo(Integer userId, 
      @RequestParam(value = "nickName",required = false) String nickName,
      @RequestParam(value = "name", required = false) String name,
      @RequestParam(value = "genderCode", required = false) Integer genderCode, 
      @RequestParam(value = "IDNo",required = false) String IDNo,
      @RequestParam(value = "birthday", required = false) Date birthday, 
      @RequestParam(value = "telephone", required = false) String telephone, 
      @RequestParam(value = "qq",required = false) String qq,
      @RequestParam(value = "description", required = false) String description) {
    Map<String, Object> updateMap = new HashMap<String, Object>();
    Map<String, Object> map = new HashMap<String, Object>();
    updateMap.put("userId", userId);
    updateMap.put("nickName", nickName);
    updateMap.put("name", name);
    updateMap.put("genderCode", genderCode);
    updateMap.put("IDType", IDNo);
    updateMap.put("birthday", birthday);
    updateMap.put("telephone", telephone);
    updateMap.put("qq", qq);
    updateMap.put("description", description);
    Integer count = userService.updateUserinfo(updateMap);
    if (count != 0) {
      map.put("state", "success");
      map.put("message", "修改成功");
      map.put("data", "");
    } else {
      map.put("state", "error");
      map.put("message", "修改失败");
      map.put("data", "");
    }
    return map;
  }

  public Map<String, Object> chooseMobile(Integer userId, @RequestParam(value = "mobile",
      required = false) String mobile, @RequestParam(value = "email", required = false) String email) {
    Map<String, Object> map = new HashMap<String, Object>();
    Map<String, Object> mobileMap = new HashMap<String, Object>();
    mobileMap.put("userId", userId);
    mobileMap.put("mobile", mobile);
    Map<String, Object> emailMap = new HashMap<String, Object>();
    emailMap.put("userId", userId);
    emailMap.put("email", email);
    int mobileCount = registerService.registerValidate(mobileMap);
    int emailCount = registerService.registerValidate(emailMap);
    Map<String, Object> me = new HashMap<String, Object>();
    me.put("userId", userId);
    me.put("mobile", mobile);
    me.put("email", email);
    int count = 0;
    if (mobile != null && mobileCount != 0) {
      map.put("state", "error");
      map.put("message", "此手机号码已注册，修改失败");
      map.put("data", "");
    } else if (email != null && emailCount != 0) {
      map.put("state", "error");
      map.put("message", "此邮箱已注册，修改失败");
      map.put("data", "");
    } else {
      count = userService.updateLoginMobile(me);
      count = userService.updateUserInfoMobile(me);
      if (count != 0) {
        map.put("state", "success");
        map.put("message", "修改成功");
        map.put("data", "");
      } else {
        map.put("state", "error");
        map.put("message", "修改失败");
        map.put("data", "");
      }
    }
    return map;
  }

  public Map<String, Object> mobileReg(Integer userId, @RequestParam(value = "mobile",
      required = false) String mobile, @RequestParam(value = "email", required = false) String email) {
    Map<String, Object> map = new HashMap<String, Object>();
    if (mobile != null) {
      Pattern pattern = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$");
      Matcher matcher = pattern.matcher(mobile);
      if (!matcher.find()) {
        map.put("state", "error");
        map.put("message", "手机号码格式错误，修改失败");
        map.put("data", "");
      } else if (email != null) {
        map = emailReg(userId, mobile,email);
      } else {
        map=chooseMobile(userId, mobile, email);
      }
    } else if (email != null) {
      map = emailReg(userId, mobile,email);
    }
    return map;
  }

  public Map<String, Object> emailReg(Integer userId,@RequestParam(value = "mobile",
      required = false) String mobile, String email) {
    Map<String, Object> map = new HashMap<String, Object>();
    Pattern emailp =
        Pattern
            .compile("^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$");
    Matcher emailm = emailp.matcher(email);
    if (!emailm.find()) {
      map.put("state", "error");
      map.put("message", "邮箱格式错误，修改失败");
      map.put("data", "");
    } else {
      map=chooseMobile(userId, mobile, email);
    }
    return map;
  } 
}

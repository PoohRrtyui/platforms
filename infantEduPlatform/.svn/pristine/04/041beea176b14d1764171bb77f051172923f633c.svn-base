package com.xunyun.infanteduplatform.controller.interaction.parenting;

import java.io.File;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.xunyun.infanteduplatform.domain.interaction.Bulletin;
import com.xunyun.infanteduplatform.domain.interaction.Image;
import com.xunyun.infanteduplatform.domain.interaction.ImageRelation;
import com.xunyun.infanteduplatform.domain.interaction.Parenting;
import com.xunyun.infanteduplatform.domain.interaction.Replay;
import com.xunyun.infanteduplatform.domain.interaction.SelectDynamic;
import com.xunyun.infanteduplatform.service.AppInfoService;
import com.xunyun.infanteduplatform.service.BulletinService;
import com.xunyun.infanteduplatform.service.ImageService;
import com.xunyun.infanteduplatform.service.ParentingService;
import com.xunyun.infanteduplatform.utils.DateUtils;
import com.xunyun.infanteduplatform.utils.InteractionUtils;

@Controller
@RequestMapping("parenting")
public class ParentingController {

  @Resource
  private AppInfoService appInfoService;

  @Resource
  private BulletinService bulletinService;

  @Resource
  private ParentingService parentingService;
  
  @Resource
  private ImageService imageService;

  @RequestMapping("/missionAcquire")
  @ResponseBody
  public Map<String, Object> missionAcquire(String appCode, Integer organizationId,
      Integer classId, @RequestParam(defaultValue = "1") Integer pageIndex, @RequestParam(
          defaultValue = "10") Integer pageSize) throws Exception {
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (organizationId == null) {
      map.put("state", "error");
      map.put("message", "机构代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (classId == null) {
      map.put("state", "error");
      map.put("message", "班级Id不能为空，获取信息失败");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，查询失败!");
      map.put("data", "");
    } else {
      // 开始条数
      Integer startNumber = pageSize * (pageIndex - 1) + 1;// 起始条数
      // 结束条数
      Integer endNumber = pageIndex * pageSize;// 终止条数
      // 总数目
      int countNumber = 0;
      Bulletin bulletin = new Bulletin();
      bulletin.setClassId(classId);
      bulletin.setOrganizationId(organizationId);
      bulletin.setStartNumber(startNumber);
      bulletin.setEndNumber(endNumber);
      bulletin.setBulletinType(2);
      List<SelectDynamic> listData = bulletinService.queryBulletinPage(bulletin);
      List<Parenting> listPar = new ArrayList<Parenting>();
      if (listData != null && listData.size() > 0) {
        countNumber = listData.get(0).getDataCount();
        for (SelectDynamic dynamic : listData) {
          Parenting parenting = new Parenting();
          parenting.setBulletinId(dynamic.getBulletinId());
          parenting.setTitle(dynamic.getTitle());
          parenting.setBulletinContent(dynamic.getBulletincontent());
          parenting.setCreatedBy(dynamic.getName());
          parenting.setCreationtime(dynamic.getStrcreationtime());
          listPar.add(parenting);
        }

        map.put("state", "success");
        // 页数
        int pageCount = (int) Math.ceil((double) countNumber / pageSize);
        // 总条数
        map.put("dataCount", countNumber);
        map.put("pageCount", pageCount);
        map.put("pageIndex", pageIndex);
        map.put("pageSize", pageSize);
        // 数据列表
        map.put("data", listPar);
      } else {
        map.put("state", "error");
        map.put("message", "数据为空");
        map.put("data", "");
      }
    }
    return map;
  }

  @RequestMapping("/parentingInfo")
  @ResponseBody
  public Map<String, Object> parentingInfo(String appCode, Integer organizationId, Integer state,
      Integer bulletinId) {
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == null || appCode == "") {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (organizationId == null) {
      map.put("state", "error");
      map.put("message", "机构代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (state == null) {
      map.put("state", "error");
      map.put("message", "状态不能为空，获取信息失败");
      map.put("data", "");
    } else if (bulletinId == null) {
      map.put("state", "error");
      map.put("message", "公告Id不能为空，获取信息失败");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，查询失败!");
      map.put("data", "");
    } else {
      Map<String, Object> datas = new HashMap<String, Object>();

      // 获取公告信息
      Bulletin bulletin = bulletinService.queryByBulletinId(bulletinId);
      Parenting parenting = new Parenting();
      parenting.setBulletinId(bulletinId);
      parenting.setTitle(bulletin.getTitle());
      parenting.setBulletinContent(bulletin.getBulletinContent());
      parenting.setCreatedBy(bulletin.getCreatedBy());
      parenting.setCreationtime(DateUtils.getTimeString(bulletin.getCreationTime()));

      // 获取图片信息
      List<Image> images = imageService.queryImageList(bulletinId);
      //将图片转为Blob返回
      List<Blob> imageContents=new ArrayList<Blob>();
      if (images.size()>0) {
        for (Image image : images) {
          imageContents.add(image.getImageContent());
        }
        datas.put("images", imageContents);
      }
      if (state == 0) {
        // 完成任务的家长名字
        List<String> finished = parentingService.findByFinished(bulletinId);

        Map<String, Object> names = new HashMap<String, Object>();
        names.put("classId", bulletin.getClassId());
        names.put("organizationId", organizationId);
        names.put("bulletinId", bulletinId);

        //TODO:效率低
        // 未完成任务的家长名字
        List<String> unfinished = parentingService.findByUnfinished(names);
        datas.put("bulletin", parenting);
        datas.put("finished", finished);
        datas.put("unfinished", unfinished);
        map.put("state", "success");
        map.put("message", "获取信息成功!");
        map.put("data", datas);
      } else {
        datas.put("bulletin", parenting);
        map.put("state", "success");
        map.put("message", "获取信息成功!");
        map.put("data", datas);
      }
    }
    return map;
  }

  @RequestMapping("/missionSave")
  @ResponseBody
  public Map<String, Object> missionSave(String appCode, Integer organizationId, Integer classId,
      Integer userId, String title, String bulletinContent, @RequestParam(
          value = "picturecontents", required = false) List<Blob> picturecontents) throws Exception {
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == null || appCode == "") {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (organizationId == null) {
      map.put("state", "error");
      map.put("message", "机构代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (classId == null) {
      map.put("state", "error");
      map.put("message", "班级Id不能为空，获取信息失败");
      map.put("data", "");
    } else if (userId == null) {
      map.put("state", "error");
      map.put("message", "用户id不能为空，获取信息失败");
      map.put("data", "");
    } else if (title == null || title == "") {
      map.put("state", "error");
      map.put("message", "标题不能为空，获取信息失败");
      map.put("data", "");
    } else if (bulletinContent == null || bulletinContent == "") {
      map.put("state", "error");
      map.put("message", "亲子任务信息不能为空，获取信息失败");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，查询失败");
      map.put("data", "");
    } else {
      Integer count =null;
      //公告信息保存
      Bulletin bulletin = new Bulletin();
      bulletin.setOrganizationId(organizationId);
      bulletin.setClassId(classId);
      bulletin.setTitle(title);
      bulletin.setBulletinType(2);
      bulletin.setBulletinContent(bulletinContent);
      bulletin.setDeleteFlg(0);
      bulletin.setSources(0);
      bulletin.setBulletinLevel(1);
      bulletin.setCreationTime(Calendar.getInstance().getTime());
      bulletin.setCreatedBy("aa");
      bulletin.setLastUpdateTime(Calendar.getInstance().getTime());
      bulletin.setLastUpdatedBy("aa");
      count = bulletinService.addBulletinInfo(bulletin);
      // TODO：图片信息
      Image image = new Image();
      if(picturecontents!=null){
       for (Blob picturecontent : picturecontents) {
         File file = InteractionUtils.blob2File(picturecontent);
         String filename = file.getName();
         // 名称（没有扩展名）
         String picturename = filename.substring(0, filename.lastIndexOf('.')); 
         // 扩展名
         String extension = filename.substring(filename.lastIndexOf('.') + 1);
         //大小
         long size = file.length();
         image.setImageContent(picturecontent);
         image.setImageName(picturename);
         image.setImageSize(size);
         image.setExtension(extension);
         image.setCreationTime(Calendar.getInstance().getTime());
         image.setCreatedBy(userId.toString());
         image.setOrganizationId(organizationId);
         image.setLastUpdateTime(Calendar.getInstance().getTime());
         image.setLastUpdatedBy("");
         //图片信息保存
         count = imageService.addImageList(image);
         ImageRelation imageRelation = new ImageRelation();
         imageRelation.setImageId(image.getImageId());
         imageRelation.setOrganizationId(organizationId);
         imageRelation.setModuleId(bulletin.getBulletinId());
         //图片关联表信息保存
         count = imageService.addImageRelation(imageRelation);
      }
      }

      if (count > 0) {
        map.put("state", "success");
        map.put("message", "信息保存成功");
        map.put("data", "");
      } else {
        map.put("state", "error");
        map.put("message", "信息保存失败");
        map.put("data", "");
      }
    }
    return map;
  }

  @RequestMapping("/missionReply")
  @ResponseBody
  public Map<String, Object> missionReply(String appCode, Integer organizationId, Integer moduleId,
      Integer targetId, Integer userId, String replayContent, @RequestParam(
          value = "picturecontents", required = false) List<Blob> picturecontents) throws Exception {
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == null || appCode == "") {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (organizationId == null) {
      map.put("state", "error");
      map.put("message", "机构代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (moduleId == null) {
      map.put("state", "error");
      map.put("message", "模块Id不能为空，获取信息失败");
      map.put("data", "");
    } else if (targetId == null) {
      map.put("state", "error");
      map.put("message", "回复对象id不能为空，获取信息失败");
      map.put("data", "");
    } else if (userId == null) {
      map.put("state", "error");
      map.put("message", "用户id不能为空，获取信息失败");
      map.put("data", "");
    } else if (replayContent == null || replayContent == "") {
      map.put("state", "error");
      map.put("message", "回复内容不能为空，获取信息失败");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，查询失败");
      map.put("data", "");
    } else {
      //回复信息保存
      Replay replay = new Replay();
      replay.setModuleId(moduleId);
      replay.setTargetId(targetId);
      replay.setUserId(userId);
      replay.setReplayContent(replayContent);
      replay.setReplayTime(Calendar.getInstance().getTime());
      Integer count = bulletinService.insertReplay(replay);
      // TODO：图片信息
      Image image = new Image();
      if(picturecontents!=null){
       for (Blob picturecontent : picturecontents) {
         File file = InteractionUtils.blob2File(picturecontent);
         String filename = file.getName();
         // 名称（没有扩展名）
         String picturename = filename.substring(0, filename.lastIndexOf('.')); 
         // 扩展名
         String extension = filename.substring(filename.lastIndexOf('.') + 1);
         //大小
         long size = file.length();
         image.setImageContent(picturecontent);
         image.setImageName(picturename);
         image.setImageSize(size);
         image.setExtension(extension);
         image.setCreationTime(Calendar.getInstance().getTime());
         image.setCreatedBy(userId.toString());
         image.setOrganizationId(organizationId);
         image.setLastUpdateTime(Calendar.getInstance().getTime());
         image.setLastUpdatedBy("");
         //图片信息保存
         count = imageService.addImageList(image);
         ImageRelation imageRelation = new ImageRelation();
         imageRelation.setImageId(image.getImageId());
         imageRelation.setOrganizationId(organizationId);
         imageRelation.setModuleId(replay.getReplayId());
         //图片关联表信息保存
         count = imageService.addImageRelation(imageRelation);
      }
      }

      if (count > 0) {
        map.put("state", "success");
        map.put("message", "信息保存成功");
        map.put("data", "");
      } else {
        map.put("state", "error");
        map.put("message", "信息保存失败");
        map.put("data", "");
      }
    }
    return map;
  }

  @RequestMapping("/missionRemind")
  @ResponseBody
  public Map<String, Object> missionRemind(String appCode, Integer organizationId, Integer moduleId) {
    Map<String, Object> map = new HashMap<String, Object>();
    if (appCode == null || appCode == "") {
      map.put("state", "error");
      map.put("message", "应用系统代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (organizationId == null) {
      map.put("state", "error");
      map.put("message", "机构代码不能为空，获取信息失败");
      map.put("data", "");
    } else if (moduleId == null) {
      map.put("state", "error");
      map.put("message", "模块Id不能为空，获取信息失败");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appCode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，查询失败");
      map.put("data", "");
    } else {
      // 获取公告信息
      Bulletin bulletin = bulletinService.queryByBulletinId(moduleId);
      Map<String, Object> names = new HashMap<String, Object>();
      names.put("classId", bulletin.getClassId());
      names.put("organizationId", organizationId);
      names.put("bulletinId", moduleId);
      //TODO:效率低
      // 未完成任务的家长名字
      List<String> unfinished = parentingService.findByUnfinished(names);
      map.put("state", "success");
      map.put("message", "未完成任务的家长名字");
      map.put("data", unfinished);

      // TODO:给未完成任务的家长发送一个提醒消息
    }
    return map;
  }
}

package com.xunyun.infanteduplatform.controller.interaction.dynamic;

import java.io.File;
import java.io.IOException;
import java.sql.Blob;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xunyun.infanteduplatform.domain.interaction.Bulletin;
import com.xunyun.infanteduplatform.domain.interaction.Image;
import com.xunyun.infanteduplatform.domain.interaction.Dynamic;
import com.xunyun.infanteduplatform.domain.interaction.ImageRelation;
import com.xunyun.infanteduplatform.domain.interaction.Replay;
import com.xunyun.infanteduplatform.domain.interaction.ReplayModel;
import com.xunyun.infanteduplatform.domain.interaction.SelectDynamic;
import com.xunyun.infanteduplatform.service.AppInfoService;
import com.xunyun.infanteduplatform.service.BulletinService;

@Controller
@RequestMapping("dynamic")
public class ClassDynamicController {

  @Autowired
  private BulletinService bulletinService;

  @Autowired
  private AppInfoService appInfoService;

  /**
   * 查询班级动态列表
   * 
   * @param organizationId
   * @param appCode
   * @param classId
   * @param pageIndex
   * @param pageSize
   * @return
   * @throws ParseException
   */
  @ResponseBody
  @RequestMapping("/queryMessageList")
  public Map<String, Object> queryMessageList(Integer organizationid, String appcode,
      Integer classid, @RequestParam(defaultValue = "1") Integer pageIndex, @RequestParam(
          defaultValue = "10") Integer pageSize) throws ParseException {

    HashMap<String, Object> map = new HashMap<String, Object>();

    if (appcode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码为空，查询失败!");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appcode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，查询失败!");
      map.put("data", "");
    } else if (organizationid == null) {
      map.put("state", "error");
      map.put("message", "机构代码为空，查询失败!");
      map.put("data", "");
    } else if (classid == null) {
      map.put("state", "error");
      map.put("message", "classId类型有误!");
      map.put("data", "");
    } else {

      // 开始条数
      Integer startNumber = pageSize * (pageIndex - 1) - 1;// 起始条数
      // 结束条数
      Integer endNumber = pageIndex * pageSize;// 终止条数
      // 总数目
      int countNumber = 0;

      Bulletin bulletin = new Bulletin();
      bulletin.setClassId(classid);
      bulletin.setOrganizationId(organizationid);
      bulletin.setStartNumber(startNumber);
      bulletin.setEndNumber(endNumber);
      bulletin.setBulletinType(3);

      List<SelectDynamic> listData1 = bulletinService.queryBulletinPage(bulletin);
      //新建返回列表数据
      List<Object> list = new ArrayList<>();
      HashMap<String, Object> map2 = new HashMap<String, Object>();
      // 数据不为空，取总数
      if (listData1 != null && listData1.size() > 0) {
        countNumber = listData1.get(0).getDataCount();

        Integer bulletinId;
        for(int i=0; i<listData1.size(); i++){
          bulletinId = listData1.get(i).getBulletinId();
          
          Dynamic dynamic = new Dynamic();
          dynamic.setModuleId(bulletinId);
          dynamic.setDynamicType(3);
          // 点赞者头像列表
          List<Dynamic> listDynamic = bulletinService.queryPhotoList(dynamic);
          listData1.get(i).setPhotoUrlList(listDynamic);
          // 动态图片列表
          List<Image> listpic = bulletinService.queryImageList(bulletinId);
          listData1.get(i).setImageList(listpic);
          // 回复列表
          Replay replay = new Replay();
          replay.setModuleId(bulletinId);
          List<ReplayModel> listReplay = bulletinService.queryReplayList(replay);
          listData1.get(i).setReplayList(listReplay);
          //塞值
          map2.put("bulletincontent", listData1.get(i).getBulletincontent());
          map2.put("creationtime", listData1.get(i).getStrcreationtime());
          map2.put("name", listData1.get(i).getName());
          map2.put("photourl", listData1.get(i).getPhotourl());
          map2.put("praiseCount", listDynamic.size());
          map2.put("repleyCount", listReplay.size());
          map2.put("replycontent", listData1.get(i).getReplayList());
          map2.put("praisephotourl", listData1.get(i).getPhotoUrlList());
          list.add(map2);
        }
        
      }
      // 页数
      int pageCount = (int) Math.ceil((double) countNumber / pageSize);

      // 总条数
      map.put("dataCount", countNumber);
      map.put("pageCount", pageCount);
      map.put("pageIndex", pageIndex);
      map.put("pageSize", pageSize);
      // 数据列表
      map.put("data", list);
    }
    return map;
  }

  /**
   * 插入班级动态
   * 
   * @param organizationid
   * @param appcode
   * @param userid
   * @param bulletincontent
   * @param picturecontent
   * @return
   * @throws Exception 
   */
  @ResponseBody
  @RequestMapping("/insertMessage")
  public Map<String, Object> insertMessage(Integer organizationid, String appcode, Integer userid,
      Integer classid, String bulletincontent, List<Blob> pictureList) throws Exception {
    
    HashMap<String, Object> map = new HashMap<String, Object>();

    if (appcode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码为空，无权插入班级动态!");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appcode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，无权插入班级动态!");
      map.put("data", "");
    } else if (organizationid == null) {
      map.put("state", "error");
      map.put("message", "机构代码参数错误!");
      map.put("data", "");
    } else if ("".equals(bulletincontent) || bulletincontent == null) {
      map.put("state", "error");
      map.put("message", "动态内容参数错误!");
      map.put("data", "");
    } else if (userid == null) {
      map.put("state", "error");
      map.put("message", "用户id参数错误!");
      map.put("data", "");
    } else {
      Bulletin bulletin = new Bulletin();
      bulletin.setOrganizationId(organizationid);
      bulletin.setBulletinContent(bulletincontent);
      bulletin.setCreatedBy(String.valueOf(userid));
      bulletin.setCreationTime(new Date());
      bulletin.setBulletinType(3);
      bulletin.setClassId(classid);
      bulletin.setTitle("");
      bulletin.setLastUpdatedBy("a");
      bulletin.setLastUpdateTime(new Date());
      //插入班级动态
      bulletinService.insertMessage(bulletin);
      int bulletinId = bulletin.getBulletinId();
      //插入班级动态图片
      Image image = new Image();
      if(pictureList.size() != 0){
        for(Blob b: pictureList){
          File file = bulletinService.blob2File(b);
          String filename = file.getName();
          // 名称（没有扩展名）
          String picturename = filename.substring(0, filename.lastIndexOf('.')); 
          // 扩展名
          String extension = filename.substring(filename.lastIndexOf('.') + 1);
          //大小
          long size = file.length();
          
          image.setImageContent(b);
          image.setImageName(picturename);
          image.setImageSize(size);
          image.setExtension(extension);
          image.setCreationTime(new Date());
          image.setCreatedBy(userid.toString());
          image.setOrganizationId(organizationid);
          image.setLastUpdateTime(new Date());
          image.setLastUpdatedBy("");
          //插入图片信息并返回imageId
          bulletinService.addImageList(image);
          Integer imageId = image.getImageId();
          
          ImageRelation imageRelation = new ImageRelation();
          imageRelation.setImageId(imageId);
          imageRelation.setOrganizationId(organizationid);
          imageRelation.setModuleId(bulletinId);
          //关联图片与班级动态
          bulletinService.addImageRelation(imageRelation);
        }
      }
      
      map.put("state", "success");
      map.put("message", "插入数据成功!");
      map.put("data", bulletinId);
    }

    return map;

  }

  /**
   * 插入点赞信息
   * @param appcode
   * @param userid
   * @param moduleid
   * @return
   */
  @ResponseBody
  @RequestMapping("/insertPraise")
  public Map<String, Object> insertPraise(String appcode, Integer userid, Integer moduleid) {

    HashMap<String, Object> map = new HashMap<String, Object>();

    if (appcode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码为空，无权插入点赞信息!");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appcode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，无权插入点赞信息!");
      map.put("data", "");
    } else if (userid == null){
      map.put("state", "error");
      map.put("message", "用户id有误!");
      map.put("data", "");
    }else if(moduleid == null){
      map.put("state", "error");
      map.put("message", "模块id有误!");
      map.put("data", "");
    } else{
      Dynamic dynamic = new Dynamic();
      dynamic.setModuleId(moduleid);
      dynamic.setUserId(userid);
      dynamic.setDynamicType(3);
      int count = bulletinService.queryDynamic(dynamic);
      
      if(count != 0){
        map.put("state", "success");
        map.put("message", "已点赞成功!");
        map.put("data", "");
      }else{
        dynamic.setPraiseTime(new Date());
        dynamic.setDynamicType(3);
        bulletinService.insertDynamic(dynamic);
        
        map.put("state", "success");
        map.put("message", "点赞成功!");
        map.put("data", dynamic);
      }
    }
    return map;
  }
  
  /**
   * 插入回复信息
   * @param appcode
   * @param userid
   * @param moduleid
   * @param targetid
   * @param content
   * @return
   */
  @ResponseBody
  @RequestMapping("/insertReply")
  public Map<String, Object> insertReply(String appcode, Integer userid, Integer moduleid,
      Integer targetid, String content) {

    HashMap<String, Object> map = new HashMap<String, Object>();

    if (appcode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码为空，无权插入回复信息!");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appcode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，无权插入回复信息!");
      map.put("data", "");
    } else if (userid == null){
      map.put("state", "error");
      map.put("message", "用户id有误!");
      map.put("data", "");
    }else if(moduleid == null){
      map.put("state", "error");
      map.put("message", "模块id有误!");
      map.put("data", "");
    } else if(targetid == 0){
      map.put("state", "error");
      map.put("message", "回复对象id有误!");
      map.put("data", "");
    } else if ("".equals(content) || content == null) {
      map.put("state", "error");
      map.put("message", "内容为空，插入数据失败!");
      map.put("data", "");
    } else {
      Replay replay = new Replay();
      replay.setModuleId(moduleid);
      replay.setTargetId(targetid);
      replay.setUserId(userid);
      replay.setReplayContent(content);
      replay.setReplayTime(new Date());
      bulletinService.insertReplay(replay);
      
      map.put("state", "success");
      map.put("message", "回复成功!");
      map.put("data", replay);
    }
    return map;
  }
  
  /**
   * 查询班级动态详情
   * @param appcode
   * @param bulletinid
   * @return
   * @throws SQLException 
   */
  @ResponseBody
  @RequestMapping("/queryMessageDetail")
  public Map<String, Object> queryMessageDetail(String appcode, Integer bulletinid) throws SQLException {
    
    HashMap<String, Object> map = new HashMap<String, Object>();
    //存放返回值
    HashMap<String, Object> map2 = new HashMap<String, Object>();
    
    if (appcode == null) {
      map.put("state", "error");
      map.put("message", "应用系统代码为空，无权查询动态详情!");
      map.put("data", "");
    } else if (!appInfoService.findByAppCode(appcode)) {
      map.put("state", "error");
      map.put("message", "应用系统代码未开启，无权查询动态详情!");
      map.put("data", "");
    } else if(bulletinid == null){
      map.put("state", "error");
      map.put("message", "通知公告id有误!");
      map.put("data", "");
    } else{
      
      Bulletin bulletin = new Bulletin();
      bulletin.setBulletinId(bulletinid);
      bulletin.setBulletinType(3);
      //班级动态详情
      SelectDynamic sd = new SelectDynamic();
      sd = bulletinService.queryDetail(bulletin);
      
      map2.put("bulletinContent", sd.getBulletincontent());
      map2.put("creationTime", sd.getStrcreationtime());
      map2.put("name", sd.getName());
      //根据photourl获取图片流
      try {
        map2.put("photourl", bulletinService.getPhoto(sd.getPhotourl()));
      } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      
      //动态图片列表
      List<Image> listImages = bulletinService.queryImageList(bulletinid);
      List<Blob> listP = new ArrayList<Blob>();
      if(listImages.size() != 0){
        for(Image a: listImages){
          listP.add(a.getImageContent());
        }
      }
      map2.put("pictureList", listP);
      
      // 点赞者头像列表
      Dynamic dynamic = new Dynamic();
      dynamic.setModuleId(bulletinid);
      dynamic.setDynamicType(3);
      List<Dynamic> listDynamic = bulletinService.queryPhotoList(dynamic);
      List<Blob> listPhoto = new ArrayList<Blob>();
      if(listDynamic.size() != 0){
        for(Dynamic a: listDynamic){
          try {
            listPhoto.add(bulletinService.getPhoto(a.getDynamicPhotoUrl()));
          } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
          }
        }
      }
      map2.put("praisephotoList", listPhoto);
      //点赞数
      map2.put("praiseCount", listDynamic.size());
      
      // 回复列表
      Replay replay = new Replay();
      replay.setModuleId(bulletinid);
      List<ReplayModel> listReplay = bulletinService.queryReplayList(replay);
      
      List<Object> list = new ArrayList<>();
      HashMap<String, Object> replayMap = new HashMap<String, Object>();
      if(listReplay.size() != 0){
        for(ReplayModel a: listReplay){
          replayMap.put("name", a.getName());
          replayMap.put("replycontent", a.getReplayContent());
          replayMap.put("ReplyTime", a.getStrReplayTime());
          list.add(replayMap);
        }
      }
      map2.put("repleycontent", list);
      map2.put("repleyCount", listReplay.size());
    }
    
    return map2;
  }

}

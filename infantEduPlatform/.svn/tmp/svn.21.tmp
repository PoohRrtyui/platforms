package com.xunyun.infanteduplatform.service;

import com.xunyun.infanteduplatform.domain.*;
import com.xunyun.infanteduplatform.domain.interaction.Dynamic;
import com.xunyun.infanteduplatform.domain.interaction.Replay;
import com.xunyun.infanteduplatform.domain.interaction.SelectDynamic;
import com.xunyun.infanteduplatform.persistent.AppInfoMapper;
import com.xunyun.infanteduplatform.persistent.BulletinMapper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

@Service("bulletin")
@Transactional
public class BulletinService {

  @Resource
  private AppInfoMapper appInfoMapper;
  
  @Resource
  private BulletinMapper bulletinMapper;
  
  @Resource
  private LoginUserService loginUserService;
  
  public AppInfoMapper getAppInfoMapper() {
    return appInfoMapper;
  }

  public void setAppInfoMapper(AppInfoMapper appInfoMapper) {
    this.appInfoMapper = appInfoMapper;
  }

  public AppInfo findById(int id) {
    
    return appInfoMapper.findById(id);
  }

  public int addAppInfo(AppInfo appInfo) {
   
    return appInfoMapper.addAppInfo(appInfo);
  }

  public List<AppInfo> findAll() {
    
    return appInfoMapper.findAll();
  }
  
  //查询班级动态列表
  public List<SelectDynamic> queryBulletinPage(SysBulletin bulletin) throws ParseException {
    
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    String time;
    
    List<SelectDynamic> dataList = bulletinMapper.queryBulletinPage(bulletin);
    
    for(int i=0; i<dataList.size(); i++){
      time = df.format(dataList.get(i).getCreationtime());
      dataList.get(i).setStrcreationtime(time);
      dataList.get(i).setCreationtime(null);
    }
    return dataList;
  }

  public int deleteAppInfo(int id) {
   
    return appInfoMapper.deleteAppInfo(id);
  }

  public int updateAppInfo(AppInfo appInfo) {
    
    return appInfoMapper.updateAppInfo(appInfo);
  }

  public int updateList(Map<String, Object> map) {
    
    return appInfoMapper.updateList(map);
  }

  public int closeList(Map<String, Object> map) {
    
    return appInfoMapper.closeList(map);
  }

  public int deleteList(Map<String, Object> map) {
    
    return appInfoMapper.deleteList(map);
  }

  public int updateValidate(AppInfo appInfo) {
    
    return appInfoMapper.updateValidate(appInfo);
  }

  //查询点赞头像列表
  public List<SysUserInfo> queryPhotoList(Dynamic dynamic) {
    return bulletinMapper.queryPhotoList(dynamic);
  }

  public List<SysImage> queryPictureList(SysImageRelation ir) {
    return bulletinMapper.queryPictureList(ir);
  }

  public List<Replay> queryReplayList(Replay replay) {
    return bulletinMapper.queryReplayList(replay);
  }
  
  //获取用户头像方法
  public String getBlob(HttpServletRequest request, Integer userId) throws IOException{
    
    LoginUserInfo userInfo = new LoginUserInfo();
    userInfo.setUserid(userId);
    
    userInfo = loginUserService.findLoginUserById(userInfo);
    
    String scheme = request.getScheme();
    String serverName = request.getServerName();
    int serverPort = request.getServerPort();
    String contextPath = request.getContextPath();
    String resourcePath = "/static/images/";
    
    //初始加载路径
    String loadPath = scheme+"://" + serverName + ":" + serverPort + contextPath 
        + resourcePath.replaceAll("\\|", "/");
    
//    BufferedImage image;
    String str;
    
    if(!"".equals(userInfo.getPhotourl()) && userInfo.getPhotourl() != null){
      
      //文件夹存在时候的路径
      String subPath= "/resources/uploadImages/userLogo/";
      String existPath = scheme+"://" + serverName + ":" + serverPort + contextPath
          + subPath + userInfo.getPhotourl() + "/";
//     image = ImageIO.read(new File(existPath + "180x180.jpg"));
     str = existPath + "180x180.jpg";
     
    }else{
//      image = ImageIO.read(new File(loadPath + "180x180.jpg"));
      str = loadPath + "180x180.jpg";
    }
     return str;
  }
  

}

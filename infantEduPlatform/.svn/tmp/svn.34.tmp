package com.xunyun.infanteduplatform.controller.pages;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.xunyun.infanteduplatform.domain.ClassManageEntity;
import com.xunyun.infanteduplatform.domain.LoginUserInfo;
import com.xunyun.infanteduplatform.domain.SysDepartmentInfo;
import com.xunyun.infanteduplatform.domain.SysUserInDepartment;
import com.xunyun.infanteduplatform.domain.SysUserInfo;
import com.xunyun.infanteduplatform.domain.SysUserInorg;
import com.xunyun.infanteduplatform.domain.TeacherInClassEntity;
import com.xunyun.infanteduplatform.domain.TreeEntity;
import com.xunyun.infanteduplatform.domain.SysUserLogin;
import com.xunyun.infanteduplatform.domain.UserInClassEntity;
import com.xunyun.infanteduplatform.service.BulletinService;
import com.xunyun.infanteduplatform.service.CodeMasterService;
import com.xunyun.infanteduplatform.service.DepartmentRelationService;
import com.xunyun.infanteduplatform.service.UserService;
import com.xunyun.infanteduplatform.utils.InteractionUtils;
import com.xunyun.infanteduplatform.utils.MD5Util;


/**
 * 类说明:用户管理处理方法类<br/>
 * 创建人:羊鑫<br/>
 * 创建日期:2015年11月30日<br/>
 * 
 */
@Controller
@RequestMapping("user")
public class UserManageController {

  @Autowired
  private DepartmentRelationService departmentRelationService;
  @Autowired
  private UserService userService;
  @Autowired
  private CodeMasterService codeMasterService;
  @Autowired
  private BulletinService bulletinService;
  /**
   * 访问用户列表页面 方法描述:<br>
   * 创建日期:2015年11月30日<br>
   */
  @RequestMapping("/index")
  public ModelAndView user_index(String appCode, @RequestParam(value = "schoolId", required = false) Integer schoolId,String type,HttpServletRequest request) {
    ModelAndView mav = new ModelAndView("pages/userManage/index");
    if(schoolId==null){
      HttpSession session = request.getSession();
      LoginUserInfo loginUserInfo = (LoginUserInfo) session.getAttribute("loginUserInfo");
      schoolId = loginUserInfo.getOrganizationid();
      type = loginUserInfo.getOrganizationtype();
    }
    mav.addObject("schoolId", schoolId);
    mav.addObject("type", type);
    return mav;
  }

  /**
   * 用户机构树加载 方法描述:<br>
   * 创建日期:2015年11月30日<br>
   * 
   */
  // 查询一级栏目
  @ResponseBody
  @RequestMapping(value = "/select", method = RequestMethod.POST)
  public List<TreeEntity> queryChannel(Integer schoolId,@RequestParam(defaultValue="0")Integer id) {
    //获取该学校ID下部门
    Map<String, Integer> dataMap = new HashMap<>();
    dataMap.put("pId", id);
    dataMap.put("sId",schoolId);
    List<SysDepartmentInfo> departmentInfos = departmentRelationService.getClassAndDepList(dataMap);
    List<TreeEntity> treeEntities = new ArrayList<TreeEntity>();
    for (SysDepartmentInfo departmentInfo : departmentInfos) {
      TreeEntity entity;
      entity = new TreeEntity();
      entity.setId(departmentInfo.getDepartmentId());
      entity.setName(departmentInfo.getDepartmentName());
      entity.setpId(departmentInfo.getParentDepartmentId());
      entity.setIsParent(departmentInfo.getIsChild() == 1);
      entity.setIsClass(false);
      treeEntities.add(entity);
    }
    //获取该学校ID下的班级
    if(id==0){
    List<ClassManageEntity> classInfos = departmentRelationService.getClassList(schoolId);
    for (ClassManageEntity classInfo : classInfos) {
      TreeEntity entity;
      entity = new TreeEntity();
      entity.setId(classInfo.getClassId());
      entity.setName(classInfo.getClassName());
      //设置为0是为了防止，查询班级时传的schoolId恰好是部门Id,就会出现班级成为部门的子节点
      entity.setpId(0);
      entity.setIsParent(false);
      entity.setIsClass(true);
      treeEntities.add(entity);
    }
    }
    return treeEntities;
  }



    /**
   * 用户列表页面 方法描述:<br>
   * 创建日期:2015年12月2日<br>
   */
 @ResponseBody
 @RequestMapping(value = "/list")
  public Map<Object,Object> user_list(@RequestParam(value = "keyValue", required = false) String keyValue,
      @RequestParam(value = "draw", required = false) Integer draw,
      @RequestParam(value = "start", required = false) Integer start,
      @RequestParam(value = "length", required = false) Integer length,
      Integer schoolId,Integer treeId,Boolean isClass) {
   // 开始条数
   int startNumber = start + 1;
   // 结束条数
   int endNumber = start + length;
   // 总数目
   int countNumber = 0;

   // 声明对象
//   SysUserInorg item = new SysUserInorg();
//   // 查询条件
//   item.setKeyValue(keyValue);
//   // 开始条数
//   item.setStartNumber(startNumber);
//   // 结束条数
//   item.setEndNumber(endNumber);
   
   Map<Object, Object> userList = new HashMap<Object, Object>();
   Map<Object, Object> dataMap = new HashMap<>();
   dataMap.put("startNumber", startNumber);
   dataMap.put("keyValue", keyValue);
   dataMap.put("endNumber", endNumber);
   dataMap.put("schoolId", schoolId);
   dataMap.put("treeId",treeId);
   dataMap.put("isClass",isClass);
   List<SysUserInorg> users = userService.queryUserBySId(dataMap);
   userList.put("data", users);
   /*if(treeId==null){    
     users = userService.queryUserBySId(schoolId);
//     userList.put("data", users);
   }else{
     if(isClass=true){
       List<SysUserInfo> techs = userService.queryUserByCId(treeId);
       List<SysUserInfo> stus = userService.queryStuByCId(treeId);
       techs.addAll(stus);
       users = techs;
       userList.put("data", users);
     }else{
       users = userService.queryUserByDId(treeId);
       userList.put("data", users);
     }
   }*/
   // 数据不为空，取总数
   if (users != null && users.size() > 0) {
       countNumber = users.get(0).getCountNumber();
   }
   // 总条数
   userList.put("recordsTotal", countNumber);
   // 过滤条数
   userList.put("recordsFiltered", countNumber);
   // 当前页数
   userList.put("draw", draw);
   return userList;
  }
 
 /**
  * 进入用户编辑页面 方法描述:<br>
  * 创建日期:2015年12月3日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/editUser",method = RequestMethod.POST)
 public ModelAndView user_add(Integer userId,Integer schoolId,Integer treeId,Boolean isClass,String type,Integer userType) {
   ModelAndView mav = new ModelAndView("pages/userManage/edit");
//   List<SysCodeMaster> opitons = codeMasterService.findOrg("机构身份");
//   mav.addObject("opitons", opitons);
   SysUserInfo users = new SysUserInfo();
   String pwd = null;
//   userId = users.getUserid();
   if(userId!=null&&userId!=' '){
     users= userService.findUserById(userId);
     SysUserLogin  logins= userService.findPwdById(userId);
     pwd = logins.getPassword();
   }
   mav.addObject("schoolId", schoolId);
   mav.addObject("treeId", treeId);
   mav.addObject("isClass", isClass);
   mav.addObject("type", type); 
   mav.addObject("userType", userType); 
   mav.addObject("users", users);
   mav.addObject("passWord", pwd);
   mav.addObject("userId", userId);
   return mav;
 }
 
 /**
  * 用户逻辑删除 方法描述:<br>
  * 创建日期:2015年12月3日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/delUser",method = RequestMethod.POST)
 public Integer user_del(Integer userId,Integer schoolId,Integer treeId,Boolean isClass,Integer userType) {
   Integer status;
   status = userService.delUserById(userId,schoolId,treeId,isClass,userType);
   return status;
 }
 
 /**
  * 用户保存 方法描述:<br>
  * 创建日期:2015年12月7日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/saveUserInfo",method = RequestMethod.POST)
 public Integer save_user(HttpServletRequest request,SysUserInfo userinfo,Integer schoolId,Integer treeId,Boolean isClass,Integer userType,String type,String pwd,Integer userId) {
   Integer status;
   
   HttpSession session = request.getSession();
   LoginUserInfo loginUserInfo = (LoginUserInfo) session.getAttribute("loginUserInfo");
   String userInfos = loginUserInfo.getname();
//   String lei = "chenlei";
   String password = MD5Util.MD5(pwd);
   
   SysUserLogin loginUser = new SysUserLogin();
   
   SysUserInorg userInorg = new SysUserInorg();
   
   TeacherInClassEntity teach = new TeacherInClassEntity();
   
   UserInClassEntity stu = new UserInClassEntity();
   
   SysUserInDepartment dept = new SysUserInDepartment();
   
   loginUser.setEmail(userinfo.getEmail());
   loginUser.setMobile(userinfo.getMobile());
   userType=0;
   if(userId!=null){
     userinfo.setUserid(userId);
     loginUser.setId(userId);
     status=userService.updateUserInfo(userinfo,loginUser);
     
   }else{
     userinfo.setCreationtime(Calendar.getInstance().getTime());
     userinfo.setIdtype(1);
     userinfo.setCreatedby(userInfos);
     userinfo.setDeleteflg(0);
     
     loginUser.setName(userinfo.getUsername());
     loginUser.setPassword(password);
     
     userInorg.setCreatedby(userInfos);
     userInorg.setStartTime(Calendar.getInstance().getTime());
     userInorg.setOrganizationType(type);
     userInorg.setOrganizationId(schoolId);
     userInorg.setIsAdmin(0);
     userInorg.setUserType(0);
     
     teach.setOrganizationId(schoolId);
     teach.setType(0);
     
     stu.setOrganizationId(schoolId);
     
     dept.setOrganizationId(schoolId);
     status = userService.saveUserInfo(userinfo,loginUser,userInorg,teach,stu,dept,treeId,isClass,userType);
   }
   return status;
 }
 
 /**
  * 设置用户管理员 方法描述:<br>
  * 创建日期:2015年12月17日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/updateAdmin",method = RequestMethod.POST)
 public Integer set_admin(String ids,Integer schoolId) {
   String[] array = ids.split(",");
   List<String> list = new ArrayList<String>();
   Map<String,Object> map = new HashMap<String,Object>();
   for (int  i =0;i<array.length;i++){
     list.add(array[i]);
 }
     Integer userid = Integer.valueOf(array[0]);
     map.put("idList", list);
     Integer count = userService.updateAdmin(map,userid,schoolId);
     return count;
 }
 
 /**
  * 设置用户管理员 方法描述:<br>
  * 创建日期:2015年12月17日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/closeAdmin",method = RequestMethod.POST)
 public Integer close_admin(String ids) {
   String[] array = ids.split(",");
   List<String> list = new ArrayList<String>();
   Map<String,Object> map = new HashMap<String,Object>();
   for (int  i =0;i<array.length;i++){
     list.add(array[i]);
   }
   map.put("idList", list);
   Integer count = userService.closeAdmin(map);
   return count;
 }
 
 /**
  * 用户认证方法描述:<br>
  * 创建日期:2015年12月17日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/auditUser",method = RequestMethod.POST)
 public Integer audit_user(String ids) {
   String[] array = ids.split(",");
   List<String> list = new ArrayList<String>();
   Map<String,Object> map = new HashMap<String,Object>();
   for (int  i =0;i<array.length;i++){
     list.add(array[i]);
   }
   map.put("idList", list);
   Integer count = userService.auditUser(map);
   return count;
 }
 
 /**
  * 用户修改单位页面加载 方法描述:<br>
  * 创建日期:2015年12月17日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/editUnit")
 public ModelAndView edit_unit(String ids,Integer schoolId,Integer treeId,Boolean isClass) {
   ModelAndView mav = new ModelAndView("pages/userManage/editUnit");
   mav.addObject("ids", ids);
   mav.addObject("schoolId", schoolId);
   return mav;
 }
 
 /**
  * 修改用户所属单位 方法描述:<br>
  * 创建日期:2015年12月21日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/saveUnit",method = RequestMethod.POST)
 public Integer save_Unit(String ids,Integer treeId,Integer tId,Boolean isClas) {
   String[] array = ids.split(",");
   List<String> list = new ArrayList<String>();
   Map<String,Object> map = new HashMap<String,Object>();
   for (int  i =0;i<array.length;i++){
     list.add(array[i]);
   }
   map.put("idList", list);
   map.put("tId", tId);
   Integer count = userService.saveUnitById(map,isClas);
   return count;
 }
 
 /**
  * 登录用户详细信息页面:<br>
  * 创建日期:2015年12月17日<br>
 * @throws IOException 
  */
 @ResponseBody
 @RequestMapping(value = "/detail")
 public ModelAndView user_detail(HttpServletRequest request) throws IOException {
   ModelAndView mav = new ModelAndView("pages/userManage/userDetail");
   HttpSession session = request.getSession();
   LoginUserInfo loginUserInfo = (LoginUserInfo) session.getAttribute("loginUserInfo");
   Integer userId = loginUserInfo.getUserid();
   String image = InteractionUtils.getBlob(request, userId);
   mav.addObject("userinfo", loginUserInfo);
   mav.addObject("image", image);
   return mav;
 }
 
 @ResponseBody
 @RequestMapping(value = "/saveUserDetail",method = RequestMethod.POST)
 public Integer save_detail(HttpServletRequest request,SysUserInfo userinfo,Integer userId) {
   Integer status;
   HttpSession session = request.getSession();
   LoginUserInfo loginUserInfo = (LoginUserInfo) session.getAttribute("loginUserInfo");
   String names = loginUserInfo.getname();
   userinfo.setLastupdatedby(names);
   userinfo.setLastupdatetime(Calendar.getInstance().getTime());
   
   SysUserLogin loginUser = new SysUserLogin();
   loginUser.setEmail(userinfo.getEmail());
   loginUser.setMobile(userinfo.getMobile());
   loginUser.setId(userinfo.getUserid());
   status = this.userService.saveUserDetail(userinfo,loginUser,userId);
   return status;
 }
 
 /**
  * 用户导出 方法描述:<br>
  * 创建日期:2015年12月21日<br>
  */
 @ResponseBody
 @RequestMapping(value = "/userExport",method = RequestMethod.POST)
 public Integer user_Export(String ids,Integer treeId,Integer tId,Boolean isClas) {
   Integer status = null;
   String[] array = ids.split(",");
   List<String> list = new ArrayList<String>();
   Map<String,Object> map = new HashMap<String,Object>();
   for (int  i =0;i<array.length;i++){
     list.add(array[i]);
   }
   map.put("idList", list);
   /*List<LoginUserInfo> users = userService.queryByIds(map);*/
// //创建HSSFWorkbook对象(excel的文档对象)
//   HSSFWorkbook wb = new HSSFWorkbook();
//   //建立新的sheet对象（excel的表单）
//   HSSFSheet sheet=wkb.createSheet("成绩表");
//   //在sheet里创建第一行，参数为行索引(excel的行)，可以是0～65535之间的任何一个
//   HSSFRow row1=sheet.createRow(0);
//   //创建单元格（excel的单元格，参数为列索引，可以是0～255之间的任何一个
//   HSSFCell cell=row1.createCell(0);
//         //设置单元格内容
//   cell.setCellValue("学员考试成绩一览表");
//   //合并单元格CellRangeAddress构造参数依次表示起始行，截至行，起始列， 截至列
//   sheet.addMergedRegion(new CellRangeAddress(0,0,0,3));
//   //在sheet里创建第二行
//   HSSFRow row2=sheet.createRow(1);   
//         //创建单元格并设置单元格内容
//         row2.createCell(0).setCellValue("姓名");
//         row2.createCell(1).setCellValue("班级");   
//         row2.createCell(2).setCellValue("笔试成绩");
//   row2.createCell(3).setCellValue("机试成绩");   
//         //在sheet里创建第三行
//         HSSFRow row3=sheet.createRow(2);
//         row3.createCell(0).setCellValue("李明");
//         row3.createCell(1).setCellValue("As178");
//         row3.createCell(2).setCellValue(87);   
//         row3.createCell(3).setCellValue(78);   
//     //.....省略部分代码
//    
//    
//   //输出Excel文件
//       OutputStream output=response.getOutputStream();
//       response.reset();
//       response.setHeader("Content-disposition", "attachment; filename=details.xls");
//       response.setContentType("application/msexcel");       
//       wkb.write(output);
//       output.close();
   return status;
 }
}
